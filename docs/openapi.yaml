openapi: 3.1.0
info:
  title: Bank API
  description: REST API для управления банковскими картами
  version: "1.0"
servers:
  - url: http://localhost:8080
    description: Development Server
paths:
  /api/users:
    get:
      tags:
        - user-controller
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
            minimum: 1
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
            maximum: 100
            minimum: 1
        - name: q
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageUserDto"
    put:
      tags:
        - user-controller
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
    post:
      tags:
        - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
  /api/transactions:
    post:
      tags:
        - transaction-controller
      operationId: makeTransaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransactionRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/cards:
    get:
      tags:
        - card-controller
      operationId: getCards
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 1
            minimum: 1
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
            maximum: 100
            minimum: 1
        - name: q
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardDto"
    post:
      tags:
        - card-controller
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCardRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
  /api/auth/register:
    post:
      tags:
        - auth-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
  /api/auth/refresh:
    post:
      tags:
        - auth-controller
      operationId: refreshToken
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
  /api/auth/logout:
    post:
      tags:
        - auth-controller
      operationId: logout
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /api/auth/login:
    post:
      tags:
        - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/AuthorizationResponse"
  /api/cards/block/{id}:
    patch:
      tags:
        - card-controller
      operationId: blockCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/cards/activate/{id}:
    patch:
      tags:
        - card-controller
      operationId: activateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/users/{id}:
    get:
      tags:
        - user-controller
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
  /api/users/current:
    get:
      tags:
        - user-controller
      operationId: getCurrentUser
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDto"
  /api/cards/{id}:
    get:
      tags:
        - card-controller
      operationId: getCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardDto"
    delete:
      tags:
        - card-controller
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/cards/balance/{id}:
    get:
      tags:
        - card-controller
      operationId: getCardBalance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardBalanceResponse"
components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        patronymic:
          type: string
        role:
          type: string
          enum:
            - USER
            - ADMIN
      required:
        - email
        - firstName
        - id
        - lastName
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          maxLength: 255
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
        patronymic:
          type: string
      required:
        - email
        - firstName
        - lastName
        - password
    TransactionRequest:
      type: object
      properties:
        sender_card_id:
          type: string
          format: uuid
        recipient_card_id:
          type: string
          format: uuid
        amount:
          type: number
      required:
        - amount
        - recipient_card_id
        - sender_card_id
    CreateCardRequest:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        period:
          type: integer
          format: int32
      required:
        - period
        - user_id
    CardDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        maskedNumber:
          type: string
        owner:
          $ref: "#/components/schemas/User"
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        expiryDate:
          type: string
          format: date
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        patronymic:
          type: string
        role:
          type: string
          enum:
            - USER
            - ADMIN
        authorities:
          type: array
          items:
            $ref: "#/components/schemas/GrantedAuthority"
        username:
          type: string
        enabled:
          type: boolean
        accountNonLocked:
          type: boolean
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
    AuthorizationResponse:
      type: object
      properties:
        token:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
        password:
          type: string
          maxLength: 2147483647
          minLength: 8
      required:
        - email
    PageUserDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        pageable:
          $ref: "#/components/schemas/PageableObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageCardDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        pageable:
          $ref: "#/components/schemas/PageableObject"
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    CardBalanceResponse:
      type: object
      properties:
        balance:
          type: number
        cardNumber:
          type: string